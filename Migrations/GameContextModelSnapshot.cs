// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dungeons.database;

namespace D_D_Backend.Migrations
{
    [DbContext(typeof(GameContext))]
    partial class GameContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3");

            modelBuilder.Entity("dungeons.database.Campaign", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("dungeonMasterID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("joinable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("log")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("maxPlayers")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("modificationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("password")
                        .HasColumnType("TEXT");

                    b.Property<int>("turnIndex")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("dungeonMasterID");

                    b.ToTable("Campaign");
                });

            modelBuilder.Entity("dungeons.database.Character", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("cClassname")
                        .HasColumnType("INTEGER");

                    b.Property<int>("cRacename")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("campaignID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("health")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ownerID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("turnIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int>("xp")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("cClassname");

                    b.HasIndex("cRacename");

                    b.HasIndex("campaignID");

                    b.HasIndex("ownerID");

                    b.ToTable("Character");
                });

            modelBuilder.Entity("dungeons.database.CharacterClass", b =>
                {
                    b.Property<int>("name")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("name");

                    b.ToTable("CharacterClass");
                });

            modelBuilder.Entity("dungeons.database.CharacterRace", b =>
                {
                    b.Property<int>("name")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("name");

                    b.ToTable("CharacterRace");
                });

            modelBuilder.Entity("dungeons.database.DiceRoll", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("campaignID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("date")
                        .HasColumnType("TEXT");

                    b.Property<int>("diceType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("roll")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("campaignID");

                    b.ToTable("DiceRoll");
                });

            modelBuilder.Entity("dungeons.database.User", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("dungeons.database.Campaign", b =>
                {
                    b.HasOne("dungeons.database.User", "dungeonMaster")
                        .WithMany()
                        .HasForeignKey("dungeonMasterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("dungeons.database.Character", b =>
                {
                    b.HasOne("dungeons.database.CharacterClass", "cClass")
                        .WithMany()
                        .HasForeignKey("cClassname")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dungeons.database.CharacterRace", "cRace")
                        .WithMany()
                        .HasForeignKey("cRacename")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dungeons.database.Campaign", "campaign")
                        .WithMany()
                        .HasForeignKey("campaignID");

                    b.HasOne("dungeons.database.User", "owner")
                        .WithMany()
                        .HasForeignKey("ownerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("dungeons.database.DiceRoll", b =>
                {
                    b.HasOne("dungeons.database.Campaign", "campaign")
                        .WithMany()
                        .HasForeignKey("campaignID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
